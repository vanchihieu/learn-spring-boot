{
  "openapi": "3.0.1",
  "info": {
    "title": "TayJava API Document",
    "description": "API documents",
    "license": {
      "name": "Apache 2.0",
      "url": "https://springdoc.org"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/user/{userId}": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Get user detail",
        "description": "Send a request via this API to get user information",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataUserDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Controller"
        ],
        "summary": "Update user",
        "description": "Send a request via this API to update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataVoid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Controller"
        ],
        "summary": "Delete user permanently",
        "description": "Send a request via this API to delete user permanently",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataVoid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User Controller"
        ],
        "summary": "Change status of user",
        "description": "Send a request via this API to change status of user",
        "operationId": "changeStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "none"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataVoid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/": {
      "post": {
        "tags": [
          "User Controller"
        ],
        "summary": "Add new user",
        "description": "Send a request via this API to create new user",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataLong"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/list": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Get list of users per pageNo",
        "description": "Send a request via this API to get user list by pageNo and pageSize",
        "operationId": "getAllUser",
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "minimum": 10,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataPageResponseObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/list-with-sort-by-multiple-columns": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Get list of users with sort by multiple columns",
        "description": "Send a request via this API to get user list by pageNo, pageSize and sort by multiple column",
        "operationId": "getAllUsersWithSortByMultipleColumns",
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sorts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/list-user-and-search-with-paging-and-sorting": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Get list of users and search with paging and sorting by customize query",
        "description": "Send a request via this API to get user list by pageNo, pageSize and sort by multiple column",
        "operationId": "getAllUsersAndSearchWithPagingAndSorting",
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/advance-search-with-specification": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Advance search query by specifications",
        "description": "Return list of users",
        "operationId": "advanceSearchWithSpecifications",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "user",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/advance-search-with-criteria": {
      "get": {
        "tags": [
          "User Controller"
        ],
        "summary": "Advance search query by criteria",
        "description": "Send a request via this API to get user list by pageNo, pageSize and sort by multiple column",
        "operationId": "advanceSearchWithCriteria",
        "parameters": [
          {
            "name": "pageNo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDataObject"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)": {
                    "summary": "Handle Bad Request",
                    "description": "Handle exception when the data invalid. (@RequestBody, @RequestParam, @PathVariable)",
                    "value": {
                      "timestamp": "2024-04-07T11:38:56.368+00:00",
                      "status": 400,
                      "path": "/api/v1/...",
                      "error": "Invalid Payload",
                      "message": "{data} must be not blank"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "examples": {
                  "404 Response": {
                    "summary": "Handle exception when resource not found",
                    "description": "404 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 404,
                      "path": "/api/v1/...",
                      "error": "Not Found",
                      "message": "{data} not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "examples": {
                  "409 Response": {
                    "summary": "Handle exception when input data is conflicted",
                    "description": "409 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:07:35.321+00:00",
                      "status": 409,
                      "path": "/api/v1/...",
                      "error": "Conflict",
                      "message": "{data} exists, Please try again!"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "examples": {
                  "500 Response": {
                    "summary": "Handle exception when internal server error",
                    "description": "500 Response",
                    "value": {
                      "timestamp": "2023-10-19T06:35:52.333+00:00",
                      "status": 500,
                      "path": "/api/v1/...",
                      "error": "Internal Server Error",
                      "message": "Connection timeout, please try again"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressDTO": {
        "type": "object",
        "properties": {
          "apartmentNumber": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "addressType": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserRequestDTO": {
        "required": [
          "addresses",
          "dateOfBirth",
          "firstName",
          "lastName",
          "password",
          "type",
          "username"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ]
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "none"
            ]
          },
          "addresses": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDTO"
            }
          }
        }
      },
      "ResponseDataVoid": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "ResponseDataLong": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResponseDataUserDetailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UserDetailResponse"
          }
        }
      },
      "UserDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "PageResponseObject": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "object"
          }
        }
      },
      "ResponseDataPageResponseObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PageResponseObject"
          }
        }
      },
      "ResponseDataObject": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}